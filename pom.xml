<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和version。 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!-- 当前项目的坐标 -->
    <groupId>com.robin</groupId>
    <artifactId>springboot-learn</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>springboot-learn</name>
    <description>Learning project for Spring Boot</description>
    <packaging>jar</packaging>

    <!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是<name>value</name>。 -->
    <properties>
        <java.version>1.8</java.version>
        <spring-cloud.version>Greenwich.M1</spring-cloud.version>
    </properties>

    <!-- 发现依赖和扩展的远程仓库列表, 按设定顺序进行查找。 -->
    <!--    <repositories>
            <repository>
                <id>aliyun-repos</id>
                <name>aliyun Repository</name>
                <url>http://maven.aliyun.com/nexus/content/groups/public</url>
            </repository>

            <repository>
                <id>spring-milestones</id>
                <name>Spring Milestones</name>
                <url>https://repo.spring.io/milestone</url>
                <snapshots>
                    <enabled>false</enabled>
                </snapshots>
            </repository>
        </repositories>-->

    <!-- 发现插件的远程仓库列表，这些插件用于构建和报表 -->
    <!--    <pluginRepositories>
            <pluginRepository>
                <id>aliyun-repos</id>
                <name>aliyun Repository</name>
                <url>http://maven.aliyun.com/nexus/content/groups/public</url>
            </pluginRepository>
        </pluginRepositories>-->

    <!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），
    如果 group ID 和 artifact ID 以外的一些信息没有描述，则通过 group ID 和 artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 -->
    <!--    <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-dependencies</artifactId>
                    <version>${spring-cloud.version}</version>
                    <type>pom</type>
                    <scope>import</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>-->


    <!-- 该元素描述了项目相关的所有依赖。这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 -->
    <build>
        <!-- 使用的插件列表 -->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>

        <!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 -->
        <resources>
            <!--引入静态文件 自定义Sql需要配置-->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <!--引入mapper对应的xml文件 自定义Sql需要配置-->
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
    </build>

    <!-- 构建项目需要的信息 -->
    <dependencies>
        <!-- ######### 基础依赖 ######### -->
        <!-- web 项目 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <!-- springboot项目默认使用的是 SLF4J + logback 日志框架； 如果是用 Log4j、log4j2 等日志框架，需要将默认的排除 -->
            <!-- <exclusions>
                 <exclusion>
                     <groupId>org.springframework.boot</groupId>
                     <artifactId>spring-boot-starter-logging</artifactId>
                 </exclusion>
             </exclusions>-->
        </dependency>
        <!-- 测试 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- aop 功能 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- 日志 , 使用默认的 logback 日志框架-->
        <!-- <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-log4j2</artifactId>
             <version>2.2.0.RELEASE</version>
         </dependency>-->


        <!-- ######### 组件依赖 ######### -->
        <!-- rabbitMQ -->
        <!--        <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-amqp</artifactId>
                </dependency>-->
        <!-- elasticsearch -->
        <!--        <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
                </dependency>-->
        <!-- mongodb -->
        <!--        <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-data-mongodb</artifactId>
                </dependency>-->
        <!-- redis -->
        <!--        <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-data-redis</artifactId>
                </dependency>-->
        <!-- redis Java 客户端 -->
        <!--        <dependency>
                    <groupId>redis.clients</groupId>
                    <artifactId>jedis</artifactId>
                    <version>3.1.0</version>
                </dependency>-->
        <!-- redis 分布式锁-->
        <!--        <dependency>
                    <groupId>org.redisson</groupId>
                    <artifactId>redisson-spring-boot-starter</artifactId>
                    <version>3.11.5</version>
                </dependency>-->
        <!--
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.1</version>
        </dependency>
        -->
        <!-- mybatis 的增强版，推荐-->
        <!--        <dependency>
                    <groupId>com.baomidou</groupId>
                    <artifactId>mybatis-plus-boot-starter</artifactId>
                    <version>3.2.0</version>
                </dependency>-->
        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- websocket -->
        <!--        <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-websocket</artifactId>
                </dependency>-->
        <!-- 模板引擎 freemarker -->
        <!--        <dependency>
                    <groupId>org.freemarker</groupId>
                    <artifactId>freemarker</artifactId>
                    <version>2.3.28</version>
                </dependency>-->
        <!-- 服务间调用 (微服务) -->
        <!--        <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-starter-openfeign</artifactId>
                </dependency>-->
        <!-- 监控系统健康情况工具 -->
        <!--        <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-actuator</artifactId>
                </dependency>-->
        <!-- MQTT 消息队列遥测传输 -->
        <!--        <dependency>
                    <groupId>org.fusesource.mqtt-client</groupId>
                    <artifactId>mqtt-client</artifactId>
                    <version>1.16</version>
                </dependency>-->
        <!-- mysql -->
        <!--        <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                    <scope>runtime</scope>
                </dependency>-->
        <!-- 分页插件 -->
        <!--        <dependency>
                    <groupId>com.github.pagehelper</groupId>
                    <artifactId>pagehelper-spring-boot-starter</artifactId>
                    <version>1.2.12</version>
                </dependency>-->
        <!-- 关系型数据库连接池 -->
        <!--        <dependency>
                    <groupId>com.alibaba</groupId>
                    <artifactId>druid</artifactId>
                    <version>1.1.20</version>
                </dependency>-->
        <!-- 数据库版本管理工具 -->
        <!--        <dependency>
                    <groupId>org.flywaydb</groupId>
                    <artifactId>flyway-core</artifactId>
                    <version>6.0.8</version>
                </dependency>-->
        <!-- 数据库单元测试 -->
        <!--        <dependency>
                    <groupId>com.github.springtestdbunit</groupId>
                    <artifactId>spring-test-dbunit</artifactId>
                    <version>1.3.0</version>
                    <scope>test</scope>
                </dependency>-->
        <!-- 数据库单元测试 -->
        <!--        <dependency>
                    <groupId>org.dbunit</groupId>
                    <artifactId>dbunit</artifactId>
                    <version>2.6.0</version>
                    <scope>test</scope>
                </dependency>-->
        <!-- ModelMapper, Java Object Mapping 工具，类似BeanUtils，效率略低于Orika，但是内部策略丰富，配置方式更舒适 -->
        <!--        <dependency>
                    <groupId>org.modelmapper</groupId>
                    <artifactId>modelmapper</artifactId>
                    <version>2.3.5</version>
                </dependency>-->
        <!-- JSON Web Token Support For The JVM，在JVM上创建和验证JSON Web Token(JWTs)的库 -->
        <!--        <dependency>
                    <groupId>io.jsonwebtoken</groupId>
                    <artifactId>jjwt</artifactId>
                    <version>0.9.1</version>
                </dependency>-->
        <!-- 异常跟踪监控；日志收集服务 -->
        <!--        <dependency>
                    <groupId>io.sentry</groupId>
                    <artifactId>sentry-log4j2</artifactId>
                    <version>1.7.28</version>
                </dependency>-->
        <!-- http 请求客户端 -->
        <!--        <dependency>
                    <groupId>org.apache.httpcomponents</groupId>
                    <artifactId>httpclient</artifactId>
                    <version>4.5.10</version>
                </dependency>-->

        <!-- ######### 工具依赖 ######### -->
        <!-- apache 常用的 java 工具包 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.9</version>
        </dependency>
        <!-- 阿里巴巴 json 转换工具 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.62</version>
        </dependency>
        <!-- Java 与 json对象、xml文档转换库 -->
        <!--
        <dependency>
           <groupId>com.fasterxml.jackson.core</groupId>
           <artifactId>jackson-core</artifactId>
           <version>2.10.0</version>
       </dependency>
       <dependency>
           <groupId>com.fasterxml.jackson.core</groupId>
           <artifactId>jackson-databind</artifactId>
       </dependency>
       <dependency>
           <groupId>com.fasterxml.jackson.core</groupId>
           <artifactId>jackson-annotations</artifactId>
       </dependency>
       <dependency>
           <groupId>com.fasterxml.jackson.module</groupId>
           <artifactId>jackson-module-jaxb-annotations</artifactId>
       </dependency>
       -->
        <!-- feign 编解码 -->
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-jackson</artifactId>
            <version>10.6.0</version>
        </dependency>
        <!-- Java 集合增强工具 -->
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.2</version>
            <scope>compile</scope>
        </dependency>
        <!-- Java 集合增强工具 -->
        <!--
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>4.4</version>
        </dependency>
        -->
        <!-- Java 时间处理工具包 -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.10.5</version>
        </dependency>
        <!-- 谷歌提供的强大的 Java 工具包 -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>28.1-jre</version>
        </dependency>
    </dependencies>


    <!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 -->
    <distributionManagement>
        <!-- 两个ID必须与 setting.xml中的<server><id>nexus-releases</id></server>保持一致-->
        <!-- 部署项目产生的构件到远程仓库需要的信息 -->
        <!--        <repository>-->
        <!--            <id>springboot-learn-release</id>-->
        <!--            <name>springboot learn release</name>-->
        <!--            <url>http://nexus.matafy.com/repository/maven-releases/</url>-->
        <!--        </repository>-->
        <!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 -->
        <!--        <snapshotRepository>-->
        <!--            <id>springboot-learn-snapshots</id>-->
        <!--            <name>springboot learn Snapshot Repository</name>-->
        <!--            <url>http://nexus.matafy.com/repository/maven-snapshots/</url>-->
        <!--        </snapshotRepository>-->
    </distributionManagement>
</project>
